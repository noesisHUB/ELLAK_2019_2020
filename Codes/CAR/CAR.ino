#include <RH_ASK.h>
#include <SPI.h> // Not actualy used but needed to compile

RH_ASK driver(2000, 10, 12, 8, false); // Default speed is 2000bps; RX pin = 11; TX pin = 12; Ptt pin =  10; PTT inverted = false

int _ABVAR_4_avgultra;
int _ABVAR_2_counter;
bool move_bool = false;
int ardublockUltrasonicSensorCodeAutoGeneratedReturnCM(int trigPin, int echoPin)
{
  int duration;
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(20);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  duration = duration / 59;
  return duration;
}

int _ABVAR_1_ultrasonic;
int _ABVAR_3_sumularta;

void setup()
{
_ABVAR_4_avgultra = 0;
pinMode( 7 , OUTPUT);
Serial.begin(9600);
_ABVAR_2_counter = 0;
pinMode( 8 , OUTPUT);
pinMode( 2 , OUTPUT);
pinMode( 6 , OUTPUT);
pinMode( 4 , OUTPUT);
_ABVAR_3_sumularta = 0;
_ABVAR_1_ultrasonic = 0;
digitalWrite( 12 , LOW );

pinMode( 9 , OUTPUT);
pinMode( 5 , OUTPUT);
pinMode( 3 , OUTPUT);
if (!driver.init())
     Serial.println("init failed");

}

void loop()
{
uint8_t buf[8];
uint8_t buflen = sizeof(buf);
if (driver.recv(buf, &buflen) || move_bool) // Non-blocking
{
  if (!move_bool) {
    // Message with a good checksum received, dump it.
    Serial.print("Hydrogen full, moving car!");    
  }
  move_bool = true;
//  Serial.println((char*)buf);
  _ABVAR_1_ultrasonic = ardublockUltrasonicSensorCodeAutoGeneratedReturnCM( 12 , 13 ) ;
  delay( 10 );
  if (( ( _ABVAR_1_ultrasonic ) > ( 0 ) ))
  {
  _ABVAR_2_counter = ( _ABVAR_2_counter + 1 ) ;
  _ABVAR_3_sumularta = ( _ABVAR_3_sumularta + _ABVAR_1_ultrasonic ) ;
  if (( ( _ABVAR_2_counter ) > ( 10 ) ))
  {
  _ABVAR_4_avgultra = ( _ABVAR_3_sumularta / 10 ) ;
  Serial.print( _ABVAR_4_avgultra );
  Serial.println("");
  _ABVAR_2_counter = 0 ;
  _ABVAR_3_sumularta = 0 ;
  }
  }
  if (( ( _ABVAR_4_avgultra ) > ( 5 ) ))
  {
  digitalWrite( 8 , LOW );
  digitalWrite( 9 , HIGH );
  digitalWrite( 7 , LOW );
  digitalWrite( 6 , HIGH );
  digitalWrite( 5 , LOW );
  digitalWrite( 4 , HIGH );
  digitalWrite( 3 , LOW );
  digitalWrite( 2 , HIGH );
  }
  else
  {
  digitalWrite( 8 , LOW );
  digitalWrite( 9 , LOW );
  digitalWrite( 7 , LOW );
  digitalWrite( 6 , LOW );
  digitalWrite( 5 , LOW );
  digitalWrite( 4 , LOW );
  digitalWrite( 2 , LOW );
  digitalWrite( 3 , LOW );
  }
}

}
